using System.Collections;
using System.Collections.Generic;
using System.Text;
using System.Threading.Tasks;
using UnityEngine;

namespace CP.Utils
{
    public static class Morton
    {
        public static readonly uint[] morton256_x = new uint[256]
        {
            0x00000000, 0x00000001, 0x00000008, 0x00000009, 0x00000040, 0x00000041, 0x00000048, 0x00000049,
            0x00000200, 0x00000201, 0x00000208, 0x00000209, 0x00000240, 0x00000241, 0x00000248, 0x00000249,
            0x00001000, 0x00001001, 0x00001008, 0x00001009, 0x00001040, 0x00001041, 0x00001048, 0x00001049,
            0x00001200, 0x00001201, 0x00001208, 0x00001209, 0x00001240, 0x00001241, 0x00001248, 0x00001249,
            0x00008000, 0x00008001, 0x00008008, 0x00008009, 0x00008040, 0x00008041, 0x00008048, 0x00008049,
            0x00008200, 0x00008201, 0x00008208, 0x00008209, 0x00008240, 0x00008241, 0x00008248, 0x00008249,
            0x00009000, 0x00009001, 0x00009008, 0x00009009, 0x00009040, 0x00009041, 0x00009048, 0x00009049,
            0x00009200, 0x00009201, 0x00009208, 0x00009209, 0x00009240, 0x00009241, 0x00009248, 0x00009249,
            0x00040000, 0x00040001, 0x00040008, 0x00040009, 0x00040040, 0x00040041, 0x00040048, 0x00040049,
            0x00040200, 0x00040201, 0x00040208, 0x00040209, 0x00040240, 0x00040241, 0x00040248, 0x00040249,
            0x00041000, 0x00041001, 0x00041008, 0x00041009, 0x00041040, 0x00041041, 0x00041048, 0x00041049,
            0x00041200, 0x00041201, 0x00041208, 0x00041209, 0x00041240, 0x00041241, 0x00041248, 0x00041249,
            0x00048000, 0x00048001, 0x00048008, 0x00048009, 0x00048040, 0x00048041, 0x00048048, 0x00048049,
            0x00048200, 0x00048201, 0x00048208, 0x00048209, 0x00048240, 0x00048241, 0x00048248, 0x00048249,
            0x00049000, 0x00049001, 0x00049008, 0x00049009, 0x00049040, 0x00049041, 0x00049048, 0x00049049,
            0x00049200, 0x00049201, 0x00049208, 0x00049209, 0x00049240, 0x00049241, 0x00049248, 0x00049249,
            0x00200000, 0x00200001, 0x00200008, 0x00200009, 0x00200040, 0x00200041, 0x00200048, 0x00200049,
            0x00200200, 0x00200201, 0x00200208, 0x00200209, 0x00200240, 0x00200241, 0x00200248, 0x00200249,
            0x00201000, 0x00201001, 0x00201008, 0x00201009, 0x00201040, 0x00201041, 0x00201048, 0x00201049,
            0x00201200, 0x00201201, 0x00201208, 0x00201209, 0x00201240, 0x00201241, 0x00201248, 0x00201249,
            0x00208000, 0x00208001, 0x00208008, 0x00208009, 0x00208040, 0x00208041, 0x00208048, 0x00208049,
            0x00208200, 0x00208201, 0x00208208, 0x00208209, 0x00208240, 0x00208241, 0x00208248, 0x00208249,
            0x00209000, 0x00209001, 0x00209008, 0x00209009, 0x00209040, 0x00209041, 0x00209048, 0x00209049,
            0x00209200, 0x00209201, 0x00209208, 0x00209209, 0x00209240, 0x00209241, 0x00209248, 0x00209249,
            0x00240000, 0x00240001, 0x00240008, 0x00240009, 0x00240040, 0x00240041, 0x00240048, 0x00240049,
            0x00240200, 0x00240201, 0x00240208, 0x00240209, 0x00240240, 0x00240241, 0x00240248, 0x00240249,
            0x00241000, 0x00241001, 0x00241008, 0x00241009, 0x00241040, 0x00241041, 0x00241048, 0x00241049,
            0x00241200, 0x00241201, 0x00241208, 0x00241209, 0x00241240, 0x00241241, 0x00241248, 0x00241249,
            0x00248000, 0x00248001, 0x00248008, 0x00248009, 0x00248040, 0x00248041, 0x00248048, 0x00248049,
            0x00248200, 0x00248201, 0x00248208, 0x00248209, 0x00248240, 0x00248241, 0x00248248, 0x00248249,
            0x00249000, 0x00249001, 0x00249008, 0x00249009, 0x00249040, 0x00249041, 0x00249048, 0x00249049,
            0x00249200, 0x00249201, 0x00249208, 0x00249209, 0x00249240, 0x00249241, 0x00249248, 0x00249249
        };

        public static readonly uint[] morton256_y = new uint[256]
        {
            0x00000000, 0x00000002, 0x00000010, 0x00000012, 0x00000080, 0x00000082, 0x00000090, 0x00000092,
            0x00000400, 0x00000402, 0x00000410, 0x00000412, 0x00000480, 0x00000482, 0x00000490, 0x00000492,
            0x00002000, 0x00002002, 0x00002010, 0x00002012, 0x00002080, 0x00002082, 0x00002090, 0x00002092,
            0x00002400, 0x00002402, 0x00002410, 0x00002412, 0x00002480, 0x00002482, 0x00002490, 0x00002492,
            0x00010000, 0x00010002, 0x00010010, 0x00010012, 0x00010080, 0x00010082, 0x00010090, 0x00010092,
            0x00010400, 0x00010402, 0x00010410, 0x00010412, 0x00010480, 0x00010482, 0x00010490, 0x00010492,
            0x00012000, 0x00012002, 0x00012010, 0x00012012, 0x00012080, 0x00012082, 0x00012090, 0x00012092,
            0x00012400, 0x00012402, 0x00012410, 0x00012412, 0x00012480, 0x00012482, 0x00012490, 0x00012492,
            0x00080000, 0x00080002, 0x00080010, 0x00080012, 0x00080080, 0x00080082, 0x00080090, 0x00080092,
            0x00080400, 0x00080402, 0x00080410, 0x00080412, 0x00080480, 0x00080482, 0x00080490, 0x00080492,
            0x00082000, 0x00082002, 0x00082010, 0x00082012, 0x00082080, 0x00082082, 0x00082090, 0x00082092,
            0x00082400, 0x00082402, 0x00082410, 0x00082412, 0x00082480, 0x00082482, 0x00082490, 0x00082492,
            0x00090000, 0x00090002, 0x00090010, 0x00090012, 0x00090080, 0x00090082, 0x00090090, 0x00090092,
            0x00090400, 0x00090402, 0x00090410, 0x00090412, 0x00090480, 0x00090482, 0x00090490, 0x00090492,
            0x00092000, 0x00092002, 0x00092010, 0x00092012, 0x00092080, 0x00092082, 0x00092090, 0x00092092,
            0x00092400, 0x00092402, 0x00092410, 0x00092412, 0x00092480, 0x00092482, 0x00092490, 0x00092492,
            0x00400000, 0x00400002, 0x00400010, 0x00400012, 0x00400080, 0x00400082, 0x00400090, 0x00400092,
            0x00400400, 0x00400402, 0x00400410, 0x00400412, 0x00400480, 0x00400482, 0x00400490, 0x00400492,
            0x00402000, 0x00402002, 0x00402010, 0x00402012, 0x00402080, 0x00402082, 0x00402090, 0x00402092,
            0x00402400, 0x00402402, 0x00402410, 0x00402412, 0x00402480, 0x00402482, 0x00402490, 0x00402492,
            0x00410000, 0x00410002, 0x00410010, 0x00410012, 0x00410080, 0x00410082, 0x00410090, 0x00410092,
            0x00410400, 0x00410402, 0x00410410, 0x00410412, 0x00410480, 0x00410482, 0x00410490, 0x00410492,
            0x00412000, 0x00412002, 0x00412010, 0x00412012, 0x00412080, 0x00412082, 0x00412090, 0x00412092,
            0x00412400, 0x00412402, 0x00412410, 0x00412412, 0x00412480, 0x00412482, 0x00412490, 0x00412492,
            0x00480000, 0x00480002, 0x00480010, 0x00480012, 0x00480080, 0x00480082, 0x00480090, 0x00480092,
            0x00480400, 0x00480402, 0x00480410, 0x00480412, 0x00480480, 0x00480482, 0x00480490, 0x00480492,
            0x00482000, 0x00482002, 0x00482010, 0x00482012, 0x00482080, 0x00482082, 0x00482090, 0x00482092,
            0x00482400, 0x00482402, 0x00482410, 0x00482412, 0x00482480, 0x00482482, 0x00482490, 0x00482492,
            0x00490000, 0x00490002, 0x00490010, 0x00490012, 0x00490080, 0x00490082, 0x00490090, 0x00490092,
            0x00490400, 0x00490402, 0x00490410, 0x00490412, 0x00490480, 0x00490482, 0x00490490, 0x00490492,
            0x00492000, 0x00492002, 0x00492010, 0x00492012, 0x00492080, 0x00492082, 0x00492090, 0x00492092,
            0x00492400, 0x00492402, 0x00492410, 0x00492412, 0x00492480, 0x00492482, 0x00492490, 0x00492492
        };

        public static readonly uint[] morton256_z = new uint[256]
        {
            0x00000000, 0x00000004, 0x00000020, 0x00000024, 0x00000100, 0x00000104, 0x00000120, 0x00000124,
            0x00000800, 0x00000804, 0x00000820, 0x00000824, 0x00000900, 0x00000904, 0x00000920, 0x00000924,
            0x00004000, 0x00004004, 0x00004020, 0x00004024, 0x00004100, 0x00004104, 0x00004120, 0x00004124,
            0x00004800, 0x00004804, 0x00004820, 0x00004824, 0x00004900, 0x00004904, 0x00004920, 0x00004924,
            0x00020000, 0x00020004, 0x00020020, 0x00020024, 0x00020100, 0x00020104, 0x00020120, 0x00020124,
            0x00020800, 0x00020804, 0x00020820, 0x00020824, 0x00020900, 0x00020904, 0x00020920, 0x00020924,
            0x00024000, 0x00024004, 0x00024020, 0x00024024, 0x00024100, 0x00024104, 0x00024120, 0x00024124,
            0x00024800, 0x00024804, 0x00024820, 0x00024824, 0x00024900, 0x00024904, 0x00024920, 0x00024924,
            0x00100000, 0x00100004, 0x00100020, 0x00100024, 0x00100100, 0x00100104, 0x00100120, 0x00100124,
            0x00100800, 0x00100804, 0x00100820, 0x00100824, 0x00100900, 0x00100904, 0x00100920, 0x00100924,
            0x00104000, 0x00104004, 0x00104020, 0x00104024, 0x00104100, 0x00104104, 0x00104120, 0x00104124,
            0x00104800, 0x00104804, 0x00104820, 0x00104824, 0x00104900, 0x00104904, 0x00104920, 0x00104924,
            0x00120000, 0x00120004, 0x00120020, 0x00120024, 0x00120100, 0x00120104, 0x00120120, 0x00120124,
            0x00120800, 0x00120804, 0x00120820, 0x00120824, 0x00120900, 0x00120904, 0x00120920, 0x00120924,
            0x00124000, 0x00124004, 0x00124020, 0x00124024, 0x00124100, 0x00124104, 0x00124120, 0x00124124,
            0x00124800, 0x00124804, 0x00124820, 0x00124824, 0x00124900, 0x00124904, 0x00124920, 0x00124924,
            0x00800000, 0x00800004, 0x00800020, 0x00800024, 0x00800100, 0x00800104, 0x00800120, 0x00800124,
            0x00800800, 0x00800804, 0x00800820, 0x00800824, 0x00800900, 0x00800904, 0x00800920, 0x00800924,
            0x00804000, 0x00804004, 0x00804020, 0x00804024, 0x00804100, 0x00804104, 0x00804120, 0x00804124,
            0x00804800, 0x00804804, 0x00804820, 0x00804824, 0x00804900, 0x00804904, 0x00804920, 0x00804924,
            0x00820000, 0x00820004, 0x00820020, 0x00820024, 0x00820100, 0x00820104, 0x00820120, 0x00820124,
            0x00820800, 0x00820804, 0x00820820, 0x00820824, 0x00820900, 0x00820904, 0x00820920, 0x00820924,
            0x00824000, 0x00824004, 0x00824020, 0x00824024, 0x00824100, 0x00824104, 0x00824120, 0x00824124,
            0x00824800, 0x00824804, 0x00824820, 0x00824824, 0x00824900, 0x00824904, 0x00824920, 0x00824924,
            0x00900000, 0x00900004, 0x00900020, 0x00900024, 0x00900100, 0x00900104, 0x00900120, 0x00900124,
            0x00900800, 0x00900804, 0x00900820, 0x00900824, 0x00900900, 0x00900904, 0x00900920, 0x00900924,
            0x00904000, 0x00904004, 0x00904020, 0x00904024, 0x00904100, 0x00904104, 0x00904120, 0x00904124,
            0x00904800, 0x00904804, 0x00904820, 0x00904824, 0x00904900, 0x00904904, 0x00904920, 0x00904924,
            0x00920000, 0x00920004, 0x00920020, 0x00920024, 0x00920100, 0x00920104, 0x00920120, 0x00920124,
            0x00920800, 0x00920804, 0x00920820, 0x00920824, 0x00920900, 0x00920904, 0x00920920, 0x00920924,
            0x00924000, 0x00924004, 0x00924020, 0x00924024, 0x00924100, 0x00924104, 0x00924120, 0x00924124,
            0x00924800, 0x00924804, 0x00924820, 0x00924824, 0x00924900, 0x00924904, 0x00924920, 0x00924924
        };

        public static readonly uint[] morton512_x = new uint[512]
        {
            0x00000000, 0x00000001, 0x00000004, 0x00000005, 0x00000010, 0x00000011, 0x00000014, 0x00000015,
            0x00000040, 0x00000041, 0x00000044, 0x00000045, 0x00000050, 0x00000051, 0x00000054, 0x00000055,
            0x00000100, 0x00000101, 0x00000104, 0x00000105, 0x00000110, 0x00000111, 0x00000114, 0x00000115,
            0x00000140, 0x00000141, 0x00000144, 0x00000145, 0x00000150, 0x00000151, 0x00000154, 0x00000155,
            0x00000400, 0x00000401, 0x00000404, 0x00000405, 0x00000410, 0x00000411, 0x00000414, 0x00000415,
            0x00000440, 0x00000441, 0x00000444, 0x00000445, 0x00000450, 0x00000451, 0x00000454, 0x00000455,
            0x00000500, 0x00000501, 0x00000504, 0x00000505, 0x00000510, 0x00000511, 0x00000514, 0x00000515,
            0x00000540, 0x00000541, 0x00000544, 0x00000545, 0x00000550, 0x00000551, 0x00000554, 0x00000555,
            0x00001000, 0x00001001, 0x00001004, 0x00001005, 0x00001010, 0x00001011, 0x00001014, 0x00001015,
            0x00001040, 0x00001041, 0x00001044, 0x00001045, 0x00001050, 0x00001051, 0x00001054, 0x00001055,
            0x00001100, 0x00001101, 0x00001104, 0x00001105, 0x00001110, 0x00001111, 0x00001114, 0x00001115,
            0x00001140, 0x00001141, 0x00001144, 0x00001145, 0x00001150, 0x00001151, 0x00001154, 0x00001155,
            0x00001400, 0x00001401, 0x00001404, 0x00001405, 0x00001410, 0x00001411, 0x00001414, 0x00001415,
            0x00001440, 0x00001441, 0x00001444, 0x00001445, 0x00001450, 0x00001451, 0x00001454, 0x00001455,
            0x00001500, 0x00001501, 0x00001504, 0x00001505, 0x00001510, 0x00001511, 0x00001514, 0x00001515,
            0x00001540, 0x00001541, 0x00001544, 0x00001545, 0x00001550, 0x00001551, 0x00001554, 0x00001555,
            0x00004000, 0x00004001, 0x00004004, 0x00004005, 0x00004010, 0x00004011, 0x00004014, 0x00004015,
            0x00004040, 0x00004041, 0x00004044, 0x00004045, 0x00004050, 0x00004051, 0x00004054, 0x00004055,
            0x00004100, 0x00004101, 0x00004104, 0x00004105, 0x00004110, 0x00004111, 0x00004114, 0x00004115,
            0x00004140, 0x00004141, 0x00004144, 0x00004145, 0x00004150, 0x00004151, 0x00004154, 0x00004155,
            0x00004400, 0x00004401, 0x00004404, 0x00004405, 0x00004410, 0x00004411, 0x00004414, 0x00004415,
            0x00004440, 0x00004441, 0x00004444, 0x00004445, 0x00004450, 0x00004451, 0x00004454, 0x00004455,
            0x00004500, 0x00004501, 0x00004504, 0x00004505, 0x00004510, 0x00004511, 0x00004514, 0x00004515,
            0x00004540, 0x00004541, 0x00004544, 0x00004545, 0x00004550, 0x00004551, 0x00004554, 0x00004555,
            0x00005000, 0x00005001, 0x00005004, 0x00005005, 0x00005010, 0x00005011, 0x00005014, 0x00005015,
            0x00005040, 0x00005041, 0x00005044, 0x00005045, 0x00005050, 0x00005051, 0x00005054, 0x00005055,
            0x00005100, 0x00005101, 0x00005104, 0x00005105, 0x00005110, 0x00005111, 0x00005114, 0x00005115,
            0x00005140, 0x00005141, 0x00005144, 0x00005145, 0x00005150, 0x00005151, 0x00005154, 0x00005155,
            0x00005400, 0x00005401, 0x00005404, 0x00005405, 0x00005410, 0x00005411, 0x00005414, 0x00005415,
            0x00005440, 0x00005441, 0x00005444, 0x00005445, 0x00005450, 0x00005451, 0x00005454, 0x00005455,
            0x00005500, 0x00005501, 0x00005504, 0x00005505, 0x00005510, 0x00005511, 0x00005514, 0x00005515,
            0x00005540, 0x00005541, 0x00005544, 0x00005545, 0x00005550, 0x00005551, 0x00005554, 0x00005555,
            0x00010000, 0x00010001, 0x00010004, 0x00010005, 0x00010010, 0x00010011, 0x00010014, 0x00010015,
            0x00010040, 0x00010041, 0x00010044, 0x00010045, 0x00010050, 0x00010051, 0x00010054, 0x00010055,
            0x00010100, 0x00010101, 0x00010104, 0x00010105, 0x00010110, 0x00010111, 0x00010114, 0x00010115,
            0x00010140, 0x00010141, 0x00010144, 0x00010145, 0x00010150, 0x00010151, 0x00010154, 0x00010155,
            0x00010400, 0x00010401, 0x00010404, 0x00010405, 0x00010410, 0x00010411, 0x00010414, 0x00010415,
            0x00010440, 0x00010441, 0x00010444, 0x00010445, 0x00010450, 0x00010451, 0x00010454, 0x00010455,
            0x00010500, 0x00010501, 0x00010504, 0x00010505, 0x00010510, 0x00010511, 0x00010514, 0x00010515,
            0x00010540, 0x00010541, 0x00010544, 0x00010545, 0x00010550, 0x00010551, 0x00010554, 0x00010555,
            0x00011000, 0x00011001, 0x00011004, 0x00011005, 0x00011010, 0x00011011, 0x00011014, 0x00011015,
            0x00011040, 0x00011041, 0x00011044, 0x00011045, 0x00011050, 0x00011051, 0x00011054, 0x00011055,
            0x00011100, 0x00011101, 0x00011104, 0x00011105, 0x00011110, 0x00011111, 0x00011114, 0x00011115,
            0x00011140, 0x00011141, 0x00011144, 0x00011145, 0x00011150, 0x00011151, 0x00011154, 0x00011155,
            0x00011400, 0x00011401, 0x00011404, 0x00011405, 0x00011410, 0x00011411, 0x00011414, 0x00011415,
            0x00011440, 0x00011441, 0x00011444, 0x00011445, 0x00011450, 0x00011451, 0x00011454, 0x00011455,
            0x00011500, 0x00011501, 0x00011504, 0x00011505, 0x00011510, 0x00011511, 0x00011514, 0x00011515,
            0x00011540, 0x00011541, 0x00011544, 0x00011545, 0x00011550, 0x00011551, 0x00011554, 0x00011555,
            0x00014000, 0x00014001, 0x00014004, 0x00014005, 0x00014010, 0x00014011, 0x00014014, 0x00014015,
            0x00014040, 0x00014041, 0x00014044, 0x00014045, 0x00014050, 0x00014051, 0x00014054, 0x00014055,
            0x00014100, 0x00014101, 0x00014104, 0x00014105, 0x00014110, 0x00014111, 0x00014114, 0x00014115,
            0x00014140, 0x00014141, 0x00014144, 0x00014145, 0x00014150, 0x00014151, 0x00014154, 0x00014155,
            0x00014400, 0x00014401, 0x00014404, 0x00014405, 0x00014410, 0x00014411, 0x00014414, 0x00014415,
            0x00014440, 0x00014441, 0x00014444, 0x00014445, 0x00014450, 0x00014451, 0x00014454, 0x00014455,
            0x00014500, 0x00014501, 0x00014504, 0x00014505, 0x00014510, 0x00014511, 0x00014514, 0x00014515,
            0x00014540, 0x00014541, 0x00014544, 0x00014545, 0x00014550, 0x00014551, 0x00014554, 0x00014555,
            0x00015000, 0x00015001, 0x00015004, 0x00015005, 0x00015010, 0x00015011, 0x00015014, 0x00015015,
            0x00015040, 0x00015041, 0x00015044, 0x00015045, 0x00015050, 0x00015051, 0x00015054, 0x00015055,
            0x00015100, 0x00015101, 0x00015104, 0x00015105, 0x00015110, 0x00015111, 0x00015114, 0x00015115,
            0x00015140, 0x00015141, 0x00015144, 0x00015145, 0x00015150, 0x00015151, 0x00015154, 0x00015155,
            0x00015400, 0x00015401, 0x00015404, 0x00015405, 0x00015410, 0x00015411, 0x00015414, 0x00015415,
            0x00015440, 0x00015441, 0x00015444, 0x00015445, 0x00015450, 0x00015451, 0x00015454, 0x00015455,
            0x00015500, 0x00015501, 0x00015504, 0x00015505, 0x00015510, 0x00015511, 0x00015514, 0x00015515,
            0x00015540, 0x00015541, 0x00015544, 0x00015545, 0x00015550, 0x00015551, 0x00015554, 0x00015555
        };

        public static readonly uint[] morton512_y = new uint[512]
        {
            0x00000000, 0x00000002, 0x00000008, 0x0000000A, 0x00000020, 0x00000022, 0x00000028, 0x0000002A,
            0x00000080, 0x00000082, 0x00000088, 0x0000008A, 0x000000A0, 0x000000A2, 0x000000A8, 0x000000AA,
            0x00000200, 0x00000202, 0x00000208, 0x0000020A, 0x00000220, 0x00000222, 0x00000228, 0x0000022A,
            0x00000280, 0x00000282, 0x00000288, 0x0000028A, 0x000002A0, 0x000002A2, 0x000002A8, 0x000002AA,
            0x00000800, 0x00000802, 0x00000808, 0x0000080A, 0x00000820, 0x00000822, 0x00000828, 0x0000082A,
            0x00000880, 0x00000882, 0x00000888, 0x0000088A, 0x000008A0, 0x000008A2, 0x000008A8, 0x000008AA,
            0x00000A00, 0x00000A02, 0x00000A08, 0x00000A0A, 0x00000A20, 0x00000A22, 0x00000A28, 0x00000A2A,
            0x00000A80, 0x00000A82, 0x00000A88, 0x00000A8A, 0x00000AA0, 0x00000AA2, 0x00000AA8, 0x00000AAA,
            0x00002000, 0x00002002, 0x00002008, 0x0000200A, 0x00002020, 0x00002022, 0x00002028, 0x0000202A,
            0x00002080, 0x00002082, 0x00002088, 0x0000208A, 0x000020A0, 0x000020A2, 0x000020A8, 0x000020AA,
            0x00002200, 0x00002202, 0x00002208, 0x0000220A, 0x00002220, 0x00002222, 0x00002228, 0x0000222A,
            0x00002280, 0x00002282, 0x00002288, 0x0000228A, 0x000022A0, 0x000022A2, 0x000022A8, 0x000022AA,
            0x00002800, 0x00002802, 0x00002808, 0x0000280A, 0x00002820, 0x00002822, 0x00002828, 0x0000282A,
            0x00002880, 0x00002882, 0x00002888, 0x0000288A, 0x000028A0, 0x000028A2, 0x000028A8, 0x000028AA,
            0x00002A00, 0x00002A02, 0x00002A08, 0x00002A0A, 0x00002A20, 0x00002A22, 0x00002A28, 0x00002A2A,
            0x00002A80, 0x00002A82, 0x00002A88, 0x00002A8A, 0x00002AA0, 0x00002AA2, 0x00002AA8, 0x00002AAA,
            0x00008000, 0x00008002, 0x00008008, 0x0000800A, 0x00008020, 0x00008022, 0x00008028, 0x0000802A,
            0x00008080, 0x00008082, 0x00008088, 0x0000808A, 0x000080A0, 0x000080A2, 0x000080A8, 0x000080AA,
            0x00008200, 0x00008202, 0x00008208, 0x0000820A, 0x00008220, 0x00008222, 0x00008228, 0x0000822A,
            0x00008280, 0x00008282, 0x00008288, 0x0000828A, 0x000082A0, 0x000082A2, 0x000082A8, 0x000082AA,
            0x00008800, 0x00008802, 0x00008808, 0x0000880A, 0x00008820, 0x00008822, 0x00008828, 0x0000882A,
            0x00008880, 0x00008882, 0x00008888, 0x0000888A, 0x000088A0, 0x000088A2, 0x000088A8, 0x000088AA,
            0x00008A00, 0x00008A02, 0x00008A08, 0x00008A0A, 0x00008A20, 0x00008A22, 0x00008A28, 0x00008A2A,
            0x00008A80, 0x00008A82, 0x00008A88, 0x00008A8A, 0x00008AA0, 0x00008AA2, 0x00008AA8, 0x00008AAA,
            0x0000A000, 0x0000A002, 0x0000A008, 0x0000A00A, 0x0000A020, 0x0000A022, 0x0000A028, 0x0000A02A,
            0x0000A080, 0x0000A082, 0x0000A088, 0x0000A08A, 0x0000A0A0, 0x0000A0A2, 0x0000A0A8, 0x0000A0AA,
            0x0000A200, 0x0000A202, 0x0000A208, 0x0000A20A, 0x0000A220, 0x0000A222, 0x0000A228, 0x0000A22A,
            0x0000A280, 0x0000A282, 0x0000A288, 0x0000A28A, 0x0000A2A0, 0x0000A2A2, 0x0000A2A8, 0x0000A2AA,
            0x0000A800, 0x0000A802, 0x0000A808, 0x0000A80A, 0x0000A820, 0x0000A822, 0x0000A828, 0x0000A82A,
            0x0000A880, 0x0000A882, 0x0000A888, 0x0000A88A, 0x0000A8A0, 0x0000A8A2, 0x0000A8A8, 0x0000A8AA,
            0x0000AA00, 0x0000AA02, 0x0000AA08, 0x0000AA0A, 0x0000AA20, 0x0000AA22, 0x0000AA28, 0x0000AA2A,
            0x0000AA80, 0x0000AA82, 0x0000AA88, 0x0000AA8A, 0x0000AAA0, 0x0000AAA2, 0x0000AAA8, 0x0000AAAA,
            0x00020000, 0x00020002, 0x00020008, 0x0002000A, 0x00020020, 0x00020022, 0x00020028, 0x0002002A,
            0x00020080, 0x00020082, 0x00020088, 0x0002008A, 0x000200A0, 0x000200A2, 0x000200A8, 0x000200AA,
            0x00020200, 0x00020202, 0x00020208, 0x0002020A, 0x00020220, 0x00020222, 0x00020228, 0x0002022A,
            0x00020280, 0x00020282, 0x00020288, 0x0002028A, 0x000202A0, 0x000202A2, 0x000202A8, 0x000202AA,
            0x00020800, 0x00020802, 0x00020808, 0x0002080A, 0x00020820, 0x00020822, 0x00020828, 0x0002082A,
            0x00020880, 0x00020882, 0x00020888, 0x0002088A, 0x000208A0, 0x000208A2, 0x000208A8, 0x000208AA,
            0x00020A00, 0x00020A02, 0x00020A08, 0x00020A0A, 0x00020A20, 0x00020A22, 0x00020A28, 0x00020A2A,
            0x00020A80, 0x00020A82, 0x00020A88, 0x00020A8A, 0x00020AA0, 0x00020AA2, 0x00020AA8, 0x00020AAA,
            0x00022000, 0x00022002, 0x00022008, 0x0002200A, 0x00022020, 0x00022022, 0x00022028, 0x0002202A,
            0x00022080, 0x00022082, 0x00022088, 0x0002208A, 0x000220A0, 0x000220A2, 0x000220A8, 0x000220AA,
            0x00022200, 0x00022202, 0x00022208, 0x0002220A, 0x00022220, 0x00022222, 0x00022228, 0x0002222A,
            0x00022280, 0x00022282, 0x00022288, 0x0002228A, 0x000222A0, 0x000222A2, 0x000222A8, 0x000222AA,
            0x00022800, 0x00022802, 0x00022808, 0x0002280A, 0x00022820, 0x00022822, 0x00022828, 0x0002282A,
            0x00022880, 0x00022882, 0x00022888, 0x0002288A, 0x000228A0, 0x000228A2, 0x000228A8, 0x000228AA,
            0x00022A00, 0x00022A02, 0x00022A08, 0x00022A0A, 0x00022A20, 0x00022A22, 0x00022A28, 0x00022A2A,
            0x00022A80, 0x00022A82, 0x00022A88, 0x00022A8A, 0x00022AA0, 0x00022AA2, 0x00022AA8, 0x00022AAA,
            0x00028000, 0x00028002, 0x00028008, 0x0002800A, 0x00028020, 0x00028022, 0x00028028, 0x0002802A,
            0x00028080, 0x00028082, 0x00028088, 0x0002808A, 0x000280A0, 0x000280A2, 0x000280A8, 0x000280AA,
            0x00028200, 0x00028202, 0x00028208, 0x0002820A, 0x00028220, 0x00028222, 0x00028228, 0x0002822A,
            0x00028280, 0x00028282, 0x00028288, 0x0002828A, 0x000282A0, 0x000282A2, 0x000282A8, 0x000282AA,
            0x00028800, 0x00028802, 0x00028808, 0x0002880A, 0x00028820, 0x00028822, 0x00028828, 0x0002882A,
            0x00028880, 0x00028882, 0x00028888, 0x0002888A, 0x000288A0, 0x000288A2, 0x000288A8, 0x000288AA,
            0x00028A00, 0x00028A02, 0x00028A08, 0x00028A0A, 0x00028A20, 0x00028A22, 0x00028A28, 0x00028A2A,
            0x00028A80, 0x00028A82, 0x00028A88, 0x00028A8A, 0x00028AA0, 0x00028AA2, 0x00028AA8, 0x00028AAA,
            0x0002A000, 0x0002A002, 0x0002A008, 0x0002A00A, 0x0002A020, 0x0002A022, 0x0002A028, 0x0002A02A,
            0x0002A080, 0x0002A082, 0x0002A088, 0x0002A08A, 0x0002A0A0, 0x0002A0A2, 0x0002A0A8, 0x0002A0AA,
            0x0002A200, 0x0002A202, 0x0002A208, 0x0002A20A, 0x0002A220, 0x0002A222, 0x0002A228, 0x0002A22A,
            0x0002A280, 0x0002A282, 0x0002A288, 0x0002A28A, 0x0002A2A0, 0x0002A2A2, 0x0002A2A8, 0x0002A2AA,
            0x0002A800, 0x0002A802, 0x0002A808, 0x0002A80A, 0x0002A820, 0x0002A822, 0x0002A828, 0x0002A82A,
            0x0002A880, 0x0002A882, 0x0002A888, 0x0002A88A, 0x0002A8A0, 0x0002A8A2, 0x0002A8A8, 0x0002A8AA,
            0x0002AA00, 0x0002AA02, 0x0002AA08, 0x0002AA0A, 0x0002AA20, 0x0002AA22, 0x0002AA28, 0x0002AA2A,
            0x0002AA80, 0x0002AA82, 0x0002AA88, 0x0002AA8A, 0x0002AAA0, 0x0002AAA2, 0x0002AAA8, 0x0002AAAA
        };

        /// <summary>
        /// Inverse of Part1By1
        /// </summary>
        /// <param name="x"></param>
        /// <returns></returns>
        private static uint Compact1By1(uint x)
        {
            x &= 0x55555555;                 // x = -f-e -d-c -b-a -9-8 -7-6 -5-4 -3-2 -1-0
            x = (x ^ (x >> 1)) & 0x33333333; // x = --fe --dc --ba --98 --76 --54 --32 --10
            x = (x ^ (x >> 2)) & 0x0f0f0f0f; // x = ---- fedc ---- ba98 ---- 7654 ---- 3210
            x = (x ^ (x >> 4)) & 0x00ff00ff; // x = ---- ---- fedc ba98 ---- ---- 7654 3210
            x = (x ^ (x >> 8)) & 0x0000ffff; // x = ---- ---- ---- ---- fedc ba98 7654 3210

            return x;
        }

        /// <summary>
        /// Inverse of Part1By2
        /// </summary>
        /// <param name="x"></param>
        /// <returns></returns>
        private static uint Compact1By2(uint x)
        {
            x &= 0x09249249;                  // x = ---- 9--8 --7- -6-- 5--4 --3- -2-- 1--0
            x = (x ^ (x >> 2)) & 0x030c30c3; // x = ---- --98 ---- 76-- --54 ---- 32-- --10
            x = (x ^ (x >> 4)) & 0x0300f00f; // x = ---- --98 ---- ---- 7654 ---- ---- 3210
            x = (x ^ (x >> 8)) & 0xff0000ff; // x = ---- --98 ---- ---- ---- ---- 7654 3210
            x = (x ^ (x >> 16)) & 0x000003ff; // x = ---- ---- ---- ---- ---- --98 7654 3210
            return x;
        }

        /// <summary>
        /// Insert a 0 bit after each of the 16 low bits of x
        /// </summary>
        /// <param name="x"></param>
        /// <returns></returns>
        private static uint Part1By1(uint x)
        {
            x &= 0x0000ffff;                  // x = ---- ---- ---- ---- fedc ba98 7654 3210
            x = (x ^ (x << 8)) & 0x00ff00ff; // x = ---- ---- fedc ba98 ---- ---- 7654 3210
            x = (x ^ (x << 4)) & 0x0f0f0f0f; // x = ---- fedc ---- ba98 ---- 7654 ---- 3210
            x = (x ^ (x << 2)) & 0x33333333; // x = --fe --dc --ba --98 --76 --54 --32 --10
            x = (x ^ (x << 1)) & 0x55555555; // x = -f-e -d-c -b-a -9-8 -7-6 -5-4 -3-2 -1-0
            return x;
        }

        /// <summary>
        /// Insert two 0 bits after each of the 10 low bits of x
        /// </summary>
        /// <param name="x"></param>
        /// <returns></returns>
        private static uint Part1By2(uint x)
        {
            x &= 0x000003ff;                  // x = ---- ---- ---- ---- ---- --98 7654 3210
            x = (x ^ (x << 16)) & 0xff0000ff; // x = ---- --98 ---- ---- ---- ---- 7654 3210
            x = (x ^ (x << 8)) & 0x0300f00f; // x = ---- --98 ---- ---- 7654 ---- ---- 3210
            x = (x ^ (x << 4)) & 0x030c30c3; // x = ---- --98 ---- 76-- --54 ---- 32-- --10
            x = (x ^ (x << 2)) & 0x09249249; // x = ---- 9--8 --7- -6-- 5--4 --3- -2-- 1--0
            return x;
        }

        private static uint[] GenerateMorton256_x()
        {
            uint[] res = new uint[256];

            Parallel.For(0, 255, i =>
            {
                res[i] = Part1By2((uint)i);
            });

            return res;
        }

        private static uint[] GenerateMorton256_y()
        {
            uint[] res = new uint[256];

            Parallel.For(0, 255, i =>
            {
                res[i] = Part1By2((uint)i) << 1;
            });

            return res;
        }

        private static uint[] GenerateMorton256_z()
        {
            uint[] res = new uint[256];

            Parallel.For(0, 255, i =>
            {
                res[i] = Part1By2((uint)i) << 2;
            });

            return res;
        }

        private static uint[] GenerateMorton512_x()
        {
            uint[] res = new uint[512];

            Parallel.For(0, 512, i =>
            {
                res[i] = Part1By1((uint)i);
            });

            return res;
        }

        private static uint[] GenerateMorton512_y()
        {
            uint[] res = new uint[512];

            Parallel.For(0, 512, i =>
            {
                res[i] = Part1By1((uint)i) << 1;
            });

            return res;
        }

        public static void PrintMorton3DTablesToFile()
        {
            uint[] x = GenerateMorton256_x();
            uint[] y = GenerateMorton256_y();
            uint[] z = GenerateMorton256_z();

            StringBuilder strBuilder = new StringBuilder();
            StringBuilder lineBuilder = new StringBuilder();

            int columnCount = 8;

            int currentColumn = 0;

            strBuilder.AppendLine("Morton256_x");

            for(int i = 0; i < x.Length; i++)
            {
                lineBuilder.Append(string.Format("0x{0}, ", x[i].ToString("X8")));

                currentColumn++;

                if(currentColumn >= columnCount)
                {
                    strBuilder.AppendLine(lineBuilder.ToString());
                    lineBuilder.Clear();

                    currentColumn = 0;
                }
            }

            currentColumn = 0;
            strBuilder.AppendLine();
            strBuilder.AppendLine("Morton256_y");

            for (int i = 0; i < y.Length; i++)
            {
                lineBuilder.Append(string.Format("0x{0}, ", y[i].ToString("X8")));

                currentColumn++;

                if (currentColumn >= columnCount)
                {
                    strBuilder.AppendLine(lineBuilder.ToString());
                    lineBuilder.Clear();

                    currentColumn = 0;
                }
            }

            currentColumn = 0;
            strBuilder.AppendLine();
            strBuilder.AppendLine("Morton256_z");

            for (int i = 0; i < z.Length; i++)
            {
                lineBuilder.Append(string.Format("0x{0}, ", z[i].ToString("X8")));

                currentColumn++;

                if (currentColumn >= columnCount)
                {
                    strBuilder.AppendLine(lineBuilder.ToString());
                    lineBuilder.Clear();

                    currentColumn = 0;
                }
            }

            System.IO.File.WriteAllText(Application.dataPath + "/Morton3D.txt", strBuilder.ToString());
        }

        public static void PrintMorton2DTablesToFile()
        {
            uint[] x = GenerateMorton512_x();
            uint[] y = GenerateMorton512_y();

            StringBuilder strBuilder = new StringBuilder();
            StringBuilder lineBuilder = new StringBuilder();

            int columnCount = 8;

            int currentColumn = 0;

            strBuilder.AppendLine("Morton512_x");

            for (int i = 0; i < x.Length; i++)
            {
                lineBuilder.Append(string.Format("0x{0}, ", x[i].ToString("X8")));

                currentColumn++;

                if (currentColumn >= columnCount)
                {
                    strBuilder.AppendLine(lineBuilder.ToString());
                    lineBuilder.Clear();

                    currentColumn = 0;
                }
            }

            currentColumn = 0;
            strBuilder.AppendLine();
            strBuilder.AppendLine("Morton512_y");

            for (int i = 0; i < y.Length; i++)
            {
                lineBuilder.Append(string.Format("0x{0}, ", y[i].ToString("X8")));

                currentColumn++;

                if (currentColumn >= columnCount)
                {
                    strBuilder.AppendLine(lineBuilder.ToString());
                    lineBuilder.Clear();

                    currentColumn = 0;
                }
            }

            System.IO.File.WriteAllText(Application.dataPath + "/Morton2D.txt", strBuilder.ToString());
        }

        public static uint GetMorton(uint x, uint y, uint z, byte level)
        {
            uint res = (uint)1 << (3 * level);

            res = res | GetMortonWithoutTerminator(x, y, z, level);

            return res;
        }

        public static uint GetMorton(Vector3Int coords, byte level)
        {
            return GetMorton((uint)coords.x, (uint)coords.y, (uint)coords.z, level);
        }

        public static uint GetMorton2D(uint x, uint y, byte level)
        {
            uint res = (uint)1 << (2 * level);

            res = res | GetMorton2DWithoutTerminator(x, y, level);

            return res;
        }

        public static uint GetMorton2D(Vector2Int coords, byte level)
        {
            return GetMorton2D((uint)coords.x, (uint)coords.y, level);
        }

        public static uint GetMortonWithoutTerminator(uint x, uint y, uint z, byte level)
        {
            return morton256_x[x] | morton256_y[y] | morton256_z[z];
        }

        public static uint GetMortonWithoutTerminator(Vector3Int coords, byte level)
        {
            return GetMortonWithoutTerminator((uint)coords.x, (uint)coords.y, (uint)coords.z, level);
        }

        public static uint GetMorton2DWithoutTerminator(uint x, uint y, byte level)
        {
            return morton512_x[x] | morton512_y[y];
        }

        public static uint GetMorton2DWithoutTerminator(Vector2Int coords, byte level)
        {
            return GetMorton2DWithoutTerminator((uint)coords.x, (uint)coords.y, level);
        }

        public static Vector3Int GetIndex(uint morton, byte level)
        {
            Vector3Int res = new Vector3Int();

            uint mask = (uint)1 << (3 * level);
            uint m = mask ^ morton;

            res.x = (int)Compact1By2(m);
            res.y = (int)Compact1By2(m >> 1);
            res.z = (int)Compact1By2(m >> 2);

            return res;
        }

        public static Vector2Int GetIndex2D(uint morton, byte level)
        {
            Vector2Int res = new Vector2Int();

            uint mask = (uint)1 << (2 * level);
            uint m = mask ^ morton;

            res.x = (int)Compact1By1(m);
            res.y = (int)Compact1By1(m >> 1);

            return res;
        }
    }
}

